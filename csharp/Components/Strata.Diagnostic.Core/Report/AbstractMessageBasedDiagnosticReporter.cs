//  ##########################################################################
//  # File Name: AbstractMessageBasedDiagnosticReporter.cs
//  # Copyright: 2011-2018, Sapientia Systems, LLC.
//  ##########################################################################

using System;
using System.IO;
using Strata.Diagnostic.Core.Common;

namespace Strata.Diagnostic.Core.Report
{
    //////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// Base class for <c>IDiagnosticReporter</c>s that output
    /// string based messages for reporting purposes.
    /// </summary>
    ///  
    public abstract 
    class AbstractMessageBasedDiagnosticReporter:
        AbstractDiagnosticReporter
    {
        private StringWriter writer;

        //////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Creates a new <c>AbstractMessageBasedDiagnosticReporter</c>
        /// instance.
        /// </summary>
        /// 
        protected 
        AbstractMessageBasedDiagnosticReporter()
        {
            writer = new StringWriter();
        }

        //////////////////////////////////////////////////////////////////////
        /// <inheritDoc/>
        /// 
        public override void 
        BeginReport()
        {
            writer = new StringWriter();
        }

        //////////////////////////////////////////////////////////////////////
        /// <inheritDoc/>
        /// 
        public override void 
        EndDiagnostic(DiagnosticOutput output)
        {
            switch (output.ResultState)
            {
                case DiagnosticResultState.ABORTED:
                    writer.Write(
                        "Aborted: [{0}] {1} {2}\n\n",
                        output.DiagnosticName,
                        output.Description,
                        output.Exception.Message );
                    break;

                case DiagnosticResultState.FAILED:
                    writer.Write(
                        "Failed:  [{0}] {1} {2}\n\n",
                        output.DiagnosticName,
                        output.Description,
                        output.Exception.Message );
                    break;

                default:
                    break;
            }
        }

        //////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Returns the formatted report generated by this reporter.
        /// </summary>
        /// 
        /// <returns>formatted report message</returns>
        /// 
        protected string
        GetMessage()
        {
            return writer.ToString();
        }
    }
}

//  ##########################################################################
